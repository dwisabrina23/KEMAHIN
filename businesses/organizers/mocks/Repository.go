// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	organizers "kemahin/businesses/organizers"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (organizers.Domain, error) {
	ret := _m.Called(id)

	var r0 organizers.Domain
	if rf, ok := ret.Get(0).(func(int) organizers.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(organizers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: name
func (_m *Repository) GetByUsername(name string) (organizers.Domain, error) {
	ret := _m.Called(name)

	var r0 organizers.Domain
	if rf, ok := ret.Get(0).(func(string) organizers.Domain); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(organizers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: data
func (_m *Repository) Register(data *organizers.Domain) (organizers.Domain, error) {
	ret := _m.Called(data)

	var r0 organizers.Domain
	if rf, ok := ret.Get(0).(func(*organizers.Domain) organizers.Domain); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(organizers.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*organizers.Domain) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
