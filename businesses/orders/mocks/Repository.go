// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	events "kemahin/businesses/events"

	mock "github.com/stretchr/testify/mock"

	orders "kemahin/businesses/orders"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: orderData, eventData
func (_m *Repository) Create(orderData *orders.Domain, eventData *events.Domain) (orders.Domain, error) {
	ret := _m.Called(orderData, eventData)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(*orders.Domain, *events.Domain) orders.Domain); ok {
		r0 = rf(orderData, eventData)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*orders.Domain, *events.Domain) error); ok {
		r1 = rf(orderData, eventData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderId provides a mock function with given fields: id
func (_m *Repository) GetByOrderId(id int) (orders.Domain, error) {
	ret := _m.Called(id)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(int) orders.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: idUSer
func (_m *Repository) GetByUserID(idUSer int) ([]orders.Domain, error) {
	ret := _m.Called(idUSer)

	var r0 []orders.Domain
	if rf, ok := ret.Get(0).(func(int) []orders.Domain); ok {
		r0 = rf(idUSer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idUSer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByID provides a mock function with given fields: idPay
func (_m *Repository) GetPaymentByID(idPay int) (string, error) {
	ret := _m.Called(idPay)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(idPay)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idPay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateOrder provides a mock function with given fields: idOrder
func (_m *Repository) ValidateOrder(idOrder int) (orders.Domain, error) {
	ret := _m.Called(idOrder)

	var r0 orders.Domain
	if rf, ok := ret.Get(0).(func(int) orders.Domain); ok {
		r0 = rf(idOrder)
	} else {
		r0 = ret.Get(0).(orders.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
